# Database Setup Documentation - Niblah Admin System

## Current Status
- **Date**: January 11, 2025
- **Database Provider**: Supabase (PostgreSQL)
- **Location**: AWS US-East-1
- **Project**: mijn-site

## What We've Done So Far

### 1. Local Development Setup (Completed)
- Created Prisma schema with User, Session, LoginAttempt models
- Set up SQLite for local development
- Created authentication system with JWT tokens
- Implemented login page at `/admin/login`
- Fixed local login with credentials: Niblah / Jukovic91!

### 2. Production Database (Just Received)
- Supabase PostgreSQL database created
- Connection URLs and credentials provided
- Ready to migrate from SQLite to PostgreSQL

## Database Credentials

### Primary Connection (for Prisma)
```
DATABASE_URL="postgres://postgres.nldfmlhrxzijgpuuaffq:9M6rTs8BMECX1zyj@aws-0-us-east-1.pooler.supabase.com:6543/postgres?sslmode=require&pgbouncer=true"
```

### Alternative URLs
- **Non-Pooling**: `postgres://postgres.nldfmlhrxzijgpuuaffq:9M6rTs8BMECX1zyj@aws-0-us-east-1.pooler.supabase.com:5432/postgres?sslmode=require`
- **Standard**: `postgres://postgres.nldfmlhrxzijgpuuaffq:9M6rTs8BMECX1zyj@aws-0-us-east-1.pooler.supabase.com:6543/postgres?sslmode=require&supa=base-pooler.x`

### Supabase Project Details
- **Project URL**: https://nldfmlhrxzijgpuuaffq.supabase.co
- **Database Host**: db.nldfmlhrxzijgpuuaffq.supabase.co
- **Database Name**: postgres
- **Username**: postgres
- **Password**: 9M6rTs8BMECX1zyj

### Supabase API Keys
- **Anon Key**: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5sZGZtbGhyeHppamdwdXVhZmZxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4OTI5NjQsImV4cCI6MjA3MDQ2ODk2NH0.VJE48UHvb25rcD8PfUATHjWR16W1TjOStX1EfDOty4U
- **Service Role Key**: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5sZGZtbGhyeHppamdwdXVhZmZxIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDg5Mjk2NCwiZXhwIjoyMDcwNDY4OTY0fQ.Fi0Mfn3WeBck0S7pWZ4Tv_SzPcexmmCS7RZwWxeMRH0

## Next Steps Plan

### Step 1: Update Prisma Configuration
- Change provider from "sqlite" to "postgresql" in schema.prisma
- Update DATABASE_URL to use PostgreSQL connection

### Step 2: Create Production Environment File
- Create .env.production with all Supabase credentials
- Ensure it's in .gitignore

### Step 3: Run Database Migrations
```bash
# Generate Prisma client for PostgreSQL
npx prisma generate

# Push schema to Supabase
npx prisma db push
```

### Step 4: Add Niblah User to Production
Run script to create user with:
- Username: Niblah
- Password: Jukovic91!
- Email: admin@admin.nl
- Role: ADMIN

### Step 5: Configure Vercel
Add these environment variables to Vercel:
- DATABASE_URL (PostgreSQL connection string)
- JWT_SECRET (for token signing)
- All Supabase variables

### Step 6: Deploy
```bash
git add .
git commit -m "Configure PostgreSQL database for production"
git push
```

### Step 7: Verify
- Test login at https://your-domain.vercel.app/admin/login
- Confirm dashboard access works

## Important Notes

### Security
- Never commit .env files with real credentials
- Use environment variables in Vercel dashboard
- Rotate keys periodically

### Database Management
- Supabase dashboard: https://app.supabase.com/project/nldfmlhrxzijgpuuaffq
- Can view tables, run SQL queries, manage backups
- Free tier includes 500MB database, 2GB bandwidth

### Connection Pooling
- Use pooled connection (port 6543) for serverless functions
- Non-pooled (port 5432) for long-running connections
- Prisma works best with pooled connections

## Troubleshooting

### If login fails on production:
1. Check Vercel environment variables are set
2. Verify database migrations ran successfully
3. Ensure user exists in production database
4. Check Vercel function logs for errors

### Common Issues:
- SSL required: Always use `?sslmode=require` in connection string
- Connection timeout: Use pooled connection for Vercel
- Prisma errors: Regenerate client after schema changes

## Admin Credentials
- **Username**: Niblah
- **Password**: Jukovic91!
- **Login URL**: /admin/login

## Files Created/Modified
- `/prisma/schema.prisma` - Database schema
- `/src/lib/auth-db.js` - Authentication logic
- `/src/app/admin/login/page.js` - Login page
- `/src/app/api/auth/login/route.js` - Login API
- `/.env.production` - Production environment (to be created)
- `/scripts/production-fix-login.js` - User creation script