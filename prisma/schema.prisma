generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  email        String    @unique
  passwordHash String
  role         UserRole  @default(ADMIN)
  createdAt    DateTime  @default(now())
  lastLogin    DateTime?
  
  sessions     Session[]
  articles     Article[]
  pages        Page[]
  settings     Setting[]
  webhookLogs  WebhookLog[]
  activityLogs ActivityLog[]
  refreshTokens RefreshToken[]
  
  @@index([username])
  @@index([email])
  @@index([createdAt])
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@index([createdAt])
}

model LoginAttempt {
  id          String   @id @default(uuid())
  ipAddress   String
  username    String?
  success     Boolean
  attemptedAt DateTime @default(now())
  
  @@index([ipAddress])
  @@index([attemptedAt])
  @@index([success])
  @@index([ipAddress, attemptedAt])
}

model Article {
  id          String        @id @default(uuid())
  title       String
  topic       String
  content     String?
  slug        String        @unique
  status      ArticleStatus @default(DRAFT)
  source      String?       @default("shipsquared")
  authorId    String?
  author      User?         @relation(fields: [authorId], references: [id], onDelete: SetNull)
  views       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  publishedAt DateTime?
  
  @@index([slug])
  @@index([status])
  @@index([createdAt])
  @@index([publishedAt])
  @@index([authorId])
  @@index([status, publishedAt])
  @@index([topic])
}

model Page {
  id              String     @id @default(uuid())
  title           String
  slug            String     @unique
  content         String?
  metaTitle       String?
  metaDescription String?
  status          PageStatus @default(DRAFT)
  type            PageType
  authorId        String?
  author          User?      @relation(fields: [authorId], references: [id], onDelete: SetNull)
  views           Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  @@index([slug])
  @@index([type])
  @@index([status])
  @@index([type, status])
  @@index([authorId])
  @@index([createdAt])
}

model Analytics {
  id         String   @id @default(uuid())
  pagePath   String
  visitorId  String?
  sessionId  String?
  referrer   String?
  userAgent  String?
  deviceType String?
  country    String?
  city       String?
  duration   Int?
  timestamp  DateTime @default(now())
  
  @@index([pagePath])
  @@index([timestamp])
  @@index([visitorId])
  @@index([sessionId])
  @@index([pagePath, timestamp])
  @@index([country])
  @@index([deviceType])
}

model Setting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     Json
  category  String
  updatedAt DateTime @updatedAt
  updatedBy String?
  user      User?    @relation(fields: [updatedBy], references: [id], onDelete: SetNull)
  
  @@index([category])
  @@index([key])
}

model WebhookLog {
  id         String   @id @default(uuid())
  url        String
  payload    Json
  response   Json?
  statusCode Int?
  success    Boolean  @default(false)
  createdAt  DateTime @default(now())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([createdAt])
  @@index([success])
}

model ActivityLog {
  id        String   @id @default(uuid())
  action    String
  entity    String
  entityId  String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  metadata  Json?
  ipAddress String?
  createdAt DateTime @default(now())
  
  @@index([entity])
  @@index([userId])
  @@index([createdAt])
  @@index([action])
  @@index([entity, entityId])
  @@index([userId, createdAt])
}

model RefreshToken {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String
  token     String   @unique
  revoked   Boolean  @default(false)
  lastUsed  DateTime?
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([sessionId])
  @@index([expiresAt])
  @@index([revoked])
  @@index([token])
  @@index([revoked, expiresAt])
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

enum ArticleStatus {
  DRAFT
  PROCESSING
  PUBLISHED
  ARCHIVED
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PageType {
  MARKETING
  SERVICE
  TOOL
  BLUEPRINT
  LANDING
}

model Client {
  id            String        @id @default(uuid())
  companyName   String
  contactName   String?
  email         String?
  phone         String?
  website       String?
  industry      String?
  status        ClientStatus  @default(ACTIVE)
  contractValue Float?
  startDate     DateTime      @default(now())
  endDate       DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  tasks         SEOTask[]
  checklists    ClientChecklist[]
  activities    ClientActivity[]
  
  @@index([status])
  @@index([companyName])
  @@index([createdAt])
}

model SEOTask {
  id          String      @id @default(uuid())
  clientId    String
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  title       String
  description String?
  status      TaskStatus  @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  category    String?
  assignee    String?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([clientId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
}

model SEOTemplate {
  id          String      @id @default(uuid())
  name        String
  description String?
  category    String
  items       Json        // Array of checklist items
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([category])
}

model ClientChecklist {
  id         String   @id @default(uuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  templateId String?
  name       String
  items      Json     // Array of checklist items with completion status
  progress   Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([clientId])
}

model ClientActivity {
  id        String   @id @default(uuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  type      String
  title     String
  description String?
  metadata  Json?
  createdAt DateTime @default(now())
  
  @@index([clientId])
  @@index([createdAt])
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  ONBOARDING
  COMPLETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}